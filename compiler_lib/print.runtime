def #print
 / requires [type]
 let _params $0  / array of values
 len $_params _count
 let _i 0
 #_next_val
 jeq $_i $_count _end
 jeq $_i 0 _skip_comma
 prt ' ' ''
 #_skip_comma
  get $_params $_i _val
  cal #get_type $_val
  let _data_type $ret
  jne $_data_type 'list' _not_list
   get $_val list _list_raw
   prt '[' ''
   cal #print $_list_raw
   prt ']' ''
   jmp _done
  #_not_list
  jne $_data_type 'str' _not_string
   /prt '\'' ''
   prt $_val ''
   /prt '\'' ''
   jmp _done
  #_not_string
  jne $_data_type 'map' _not_map
   get $_val map _map_raw
   prt $_map_raw
   jmp _done
  #_not_map
  prt $_val ''
  #_done
 add _i $_i 1
 jmp _next_val
 #_end
end
