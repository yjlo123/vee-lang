/*
    146. LRU Cache
    https://blog.siwei.dev/leetcode/146-lru-cache/
*/

class Node {
    key = nil
    val = nil
    prev = nil
    next = nil

    func init(key, val) {
        this.key = key
        this.val = val
    }
}

class LRUCache {
    cache = {}
    size = 0
    capacity = 0
    head = nil
    tail = nil

    func init(capacity) {
        this.capacity = capacity
        this.head = Node(0, 0)
        this.tail = Node(0, 0)
        this.head.next = this.tail
        this.tail.prev = this.head
    }

    func _add_node(node) {
        // add to head
        node.prev = this.head
        node.next = this.head.next
        this.head.next.prev = node
        this.head.next = node
    }

    func _remove_node(node) {
        // remove from tail
        prev_node = node.prev
        next_node = node.next
        prev_node.next = next_node
        next_node.prev = prev_node
    }

    func _move_to_head(node) {
        this._remove_node(node)
        this._add_node(node)
    }

    func _pop_tail() {
        node = this.tail.prev
        this._remove_node(node)
        return node
    }

    func get(key) {
        node = this.cache.get(key)
        if node == nil {
            print('[GET]', -1)
            return -1
        }
        this._move_to_head(node)
        print('[GET]', node.val)
        return node.val
    }

    func put(key, value) {
        node = this.cache.get(key)
        if node == nil {
            new_node = Node(key, value)

            this.cache.set(key, new_node)
            this._add_node(new_node)

            this.size = this.size + 1
            if this.size > this.capacity {
                tail_removed = this._pop_tail()
                this.cache.del(tail_removed.key)
                this.size = this.size - 1
            }
        } else {
            node.val = value
            self._move_to_head(node)
        }
    }

    func print_data() {
        cur = head.next
        print('--- LRU ---')
        while cur.next != nil {
            print(cur.key + ':' + cur.val)
            cur = cur.next
        }
        print('-----------')
    }
}

lruCache = LRUCache(2)
lruCache.put(1, 1) // cache is {1=1}
lruCache.put(2, 2) // cache is {1=1, 2=2}
lruCache.get(1)    // return 1
lruCache.put(3, 3) // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lruCache.get(2)    // returns -1 (not found)
lruCache.put(4, 4) // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lruCache.get(1)    // return -1 (not found)
lruCache.get(3)    // return 3
lruCache.get(4)    // return 4
